pillars 

![ScreenShot](https://github.com/SylvesterSA/Mini-exercises/blob/gh-pages/Mini%20ex_%206/Udklip.PNG)
![ScreenShot](Unanvgivet.png)
run: https://cdn.rawgit.com/SylvesterSA/Mini-exercises/gh-pages/Mini%20ex_%206/index.html



pillars is my attempt at creating generativity in a program. Simply described, the program produces a lot of circles of varying size and colour depending on the location on the canvas. When the mouseX is at 0, det circles are formed in a perfect grid form, and then moving mouseX moves the circles in random positions.  A lower value on the y-axis creates smaller circles and a higher value creates bigger circles. When the mouseY value reaches 500, the colours also change from black/white to random colours. When the mouse is clicked, a identical amount of circles appears on random positions on the canvas. The mouseX and mouseY increases by themselves, but can also be controlled by the user. Pressing the space bar clears the canvas and starts another instance of rising circles. 
I have included a couple of aspects within my program to create generativity: randomization and evolution. This is a very superficial description of generativity, but it is a start for this program. I will further elaborate my thoughts in the following segment.  
To discuss this works notion of generativity i’ve experimented with giving both the user and the system itself the ability to generate. The autonomy given to the program lets the user cede control and allow the program to create the ’artworks’. However by allowing the user to be the creater it adds another aspect to the generativity. Because of the randomization the work will never look identical, but the user has the ability to better control the outcome – thereby confining the generativity, for example by setting the size and position of the circles. 
Galanters definition of generativity states: 
”Generative art refers to any art practice in which the artist uses a system, such as a set of natural language rules, a computer program, a machine, or other procedural invention, that is set into motion with som degree of autonomy, thereby contributing to or resulting in a acompleted work of art.”
In my program the user can predefine som aspects on the generativty before setting it into motion and initiating the autonomy of the program. There are genreally many discussion on the level of autonomy required for something to be considered ’generative art’ but this one mention only a modest use as a necessity. Galanter later redefines generative art, stating ’the artist needs to cede control to the system’.
The notion of authorship is also interesting in this work. When you have a different outcome than me, is it then yours? To answer this i think its important to consider that the user and the program works together in a way. The view on the ’author’ has also changed, as it is less about being the author of the outcome, but more being the author of the tool that makes the outcome. This notion and the problems associated are also widely discussed. 
To improve this work, more emphasis could be put on the emergence of the program by making it more self-organizing via more factors and parameters that alter the behaviour of the program. I personally think this work balances on the line of generativity on the notion of ceding control to the system. It was my best attempt at letting both the user and the system have control over the randomization and generativity. I understand the use of the program can be a little confusing, (as it didn’t behave completely as intentional) but i urge you to try it a number of times in different ways to see the different possibilities of generativity. I have also included screenshots to show some different outcomes. Can you find more? 

